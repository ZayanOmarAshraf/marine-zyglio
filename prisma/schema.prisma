generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email        String         @unique
  name         String?
  createdAt    DateTime       @default(now()) @db.Timestamptz(6)
  role         user_role      @default(trainee)
  LearningTask LearningTask[]

  @@map("users")
}

model AISuggestion {
  id          String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  text        String
  kind        SuggestionType
  dictationId String         @db.Uuid
  Dictation   Dictation      @relation(fields: [dictationId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([dictationId])
}

model Dictation {
  id           String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  audioUrl     String
  transcript   String
  createdAt    DateTime       @default(now()) @db.Timestamptz(6)
  taskId       String         @db.Uuid
  AISuggestion AISuggestion[]
  LearningTask LearningTask   @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Question     Question[]

  @@index([taskId])
}

model ExternalResource {
  id           String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  url          String
  description  String
  taskId       String       @db.Uuid
  LearningTask LearningTask @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([taskId])
}

model Flowchart {
  id           String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  mermaid      String
  taskId       String       @db.Uuid
  LearningTask LearningTask @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([taskId])
}

model LearningTask {
  id               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title            String
  kpiTech          String?
  kpiConcept       String?
  presenter        String
  affiliation      String?
  date             DateTime           @db.Timestamptz(6)
  userId           String             @db.Uuid
  Dictation        Dictation[]
  ExternalResource ExternalResource[]
  Flowchart        Flowchart[]
  users            User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  MediaItem        MediaItem[]
  Procedure        Procedure[]
  Simulation       Simulation[]
  YamlOutput       YamlOutput[]

  @@index([userId])
}

model MediaItem {
  id            String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type          MediaType
  caption       String?
  url           String
  relevance     String?
  createdAt     DateTime       @default(now()) @db.Timestamptz(6)
  taskId        String         @db.Uuid
  stepId        String?        @db.Uuid
  ProcedureStep ProcedureStep? @relation(fields: [stepId], references: [id], onUpdate: NoAction)
  LearningTask  LearningTask   @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([stepId])
  @@index([taskId])
}

model Procedure {
  id                 String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title              String
  taskId             String          @db.Uuid
  simulationSettings Json?           @default("{}")
  LearningTask       LearningTask    @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ProcedureStep      ProcedureStep[]

  @@index([taskId])
}

model ProcedureStep {
  id          String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  index       Int
  content     String
  notes       String?
  conditions  String?
  procedureId String      @db.Uuid
  MediaItem   MediaItem[]
  Procedure   Procedure   @relation(fields: [procedureId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Question    Question[]

  @@index([procedureId])
}

model Question {
  id            String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type          QuestionType
  content       String
  options       String?
  correct       String?
  dictationId   String?        @db.Uuid
  stepId        String?        @db.Uuid
  Dictation     Dictation?     @relation(fields: [dictationId], references: [id], onUpdate: NoAction)
  ProcedureStep ProcedureStep? @relation(fields: [stepId], references: [id], onUpdate: NoAction)

  @@index([dictationId])
  @@index([stepId])
}

model Simulation {
  id             String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  taskId         String           @db.Uuid
  LearningTask   LearningTask     @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  SimulationStep SimulationStep[]

  @@index([taskId])
}

model SimulationStep {
  id               String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  prompt           String
  expectedAnswer   String?
  mediaUrl         String?
  latencyThreshold Int?
  feedback         String?
  simulationId     String     @db.Uuid
  Simulation       Simulation @relation(fields: [simulationId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([simulationId])
}

model YamlOutput {
  id           String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  content      String
  taskId       String       @db.Uuid
  LearningTask LearningTask @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([taskId])
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  PDF
}

enum QuestionType {
  MCQ
  OPEN_ENDED
}

enum SuggestionType {
  INSERTION
  CLARIFYING_QUESTION
  MCQ
  OPEN_ENDED
}

enum user_role {
  sme
  trainee
  admin
}

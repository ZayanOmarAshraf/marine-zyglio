generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model AISuggestion {
  id          String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  text        String
  kind        SuggestionType
  dictationId String         @db.Uuid

  @@index([dictationId])
}

model Dictation {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  audioUrl   String
  transcript String
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  taskId     String   @db.Uuid

  @@index([taskId])
}

model ExternalResource {
  id          String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  url         String
  description String
  taskId      String @db.Uuid

  @@index([taskId])
}

model Flowchart {
  id      String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  mermaid String
  taskId  String @db.Uuid

  @@index([taskId])
}

model LearningTask {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title       String
  kpiTech     String?
  kpiConcept  String?
  presenter   String
  affiliation String?
  date        DateTime @db.Timestamptz(6)
  userId      String   @db.Uuid
  users       users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId])
}

model MediaItem {
  id        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type      MediaType
  caption   String?
  url       String
  relevance String?
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  taskId    String    @db.Uuid
  stepId    String?   @db.Uuid

  @@index([stepId])
  @@index([taskId])
}

model Procedure {
  id                 String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title              String
  taskId             String @db.Uuid
  simulationSettings Json?  @default("{}")

  @@index([taskId])
}

model ProcedureStep {
  id                String   @id
  procedureId       String
  content           String
  index             Int
  isCheckpoint      Boolean  @default(false)
  expectedResponses Json     @default("[]")
  createdAt         DateTime @default(now())
  updatedAt         DateTime

  @@index([procedureId])
}

model Question {
  id          String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type        QuestionType
  content     String
  options     String?
  correct     String?
  dictationId String?      @db.Uuid
  stepId      String?      @db.Uuid

  @@index([dictationId])
  @@index([stepId])
}

model Simulation {
  id     String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  taskId String @db.Uuid

  @@index([taskId])
}

model SimulationStep {
  id               String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  prompt           String
  expectedAnswer   String?
  mediaUrl         String?
  latencyThreshold Int?
  feedback         String?
  simulationId     String  @db.Uuid

  @@index([simulationId])
}

model YamlOutput {
  id      String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  content String
  taskId  String @db.Uuid

  @@index([taskId])
}

model chunks {
  id             String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  documentId     String                 @db.Uuid
  text           String
  embedding      Unsupported("vector")?
  sequenceNumber Int
  metadata       Json?
  createdAt      DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime               @default(now()) @db.Timestamptz(6)
  documents      documents              @relation(fields: [documentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_document")

  @@index([documentId])
  @@index([embedding])
}

model documents {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title      String
  url        String
  broadTopic String
  sourceType String
  content    String?
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @db.Timestamptz(6)
  chunks     chunks[]
}

model users {
  id           String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email        String         @unique
  name         String?
  createdAt    DateTime       @default(now()) @db.Timestamptz(6)
  role         user_role      @default(trainee)
  LearningTask LearningTask[]
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  PDF
}

enum QuestionType {
  MCQ
  OPEN_ENDED
}

enum SuggestionType {
  INSERTION
  CLARIFYING_QUESTION
  MCQ
  OPEN_ENDED
}

enum user_role {
  sme
  trainee
  admin
}

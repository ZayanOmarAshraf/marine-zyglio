generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email         String         @unique
  name          String?
  createdAt     DateTime       @default(now()) @db.Timestamptz(6)
  learningTasks LearningTask[]
  role          user_role      @default(trainee)
  
  // No password field as it's managed by Supabase Auth
  
  // Maps to auth.users in Supabase
  @@map("users")
}

model LearningTask {
  id          String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title       String
  kpiTech     String?
  kpiConcept  String?
  presenter   String
  affiliation String?
  date        DateTime           @db.Timestamptz(6)
  userId      String             @db.Uuid
  dictations  Dictation[]
  urls        ExternalResource[]
  flowcharts  Flowchart[]
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  mediaItems  MediaItem[]
  procedures  Procedure[]
  simulations Simulation[]
  yamlOutputs YamlOutput[]

  @@index([userId])
}

model MediaItem {
  id        String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type      MediaType
  caption   String?
  url       String
  relevance String?
  createdAt DateTime       @default(now()) @db.Timestamptz(6)
  taskId    String         @db.Uuid
  stepId    String?        @db.Uuid
  step      ProcedureStep? @relation(fields: [stepId], references: [id], onUpdate: NoAction)
  task      LearningTask   @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([stepId])
  @@index([taskId])
}

model ExternalResource {
  id          String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  url         String
  description String
  taskId      String       @db.Uuid
  task        LearningTask @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([taskId])
}

model Dictation {
  id            String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  audioUrl      String
  transcript    String
  createdAt     DateTime       @default(now()) @db.Timestamptz(6)
  taskId        String         @db.Uuid
  aiSuggestions AISuggestion[]
  task          LearningTask   @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  questions     Question[]

  @@index([taskId])
}

model AISuggestion {
  id          String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  text        String
  kind        SuggestionType
  dictationId String         @db.Uuid
  dictation   Dictation      @relation(fields: [dictationId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([dictationId])
}

model Question {
  id          String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type        QuestionType
  content     String
  options     String?
  correct     String?
  dictationId String?        @db.Uuid
  stepId      String?        @db.Uuid
  dictation   Dictation?     @relation(fields: [dictationId], references: [id], onUpdate: NoAction)
  step        ProcedureStep? @relation(fields: [stepId], references: [id], onUpdate: NoAction)

  @@index([dictationId])
  @@index([stepId])
}

model Procedure {
  id     String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title  String
  taskId String          @db.Uuid
  task   LearningTask    @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  steps  ProcedureStep[]

  @@index([taskId])
}

model ProcedureStep {
  id          String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  index       Int
  content     String
  notes       String?
  conditions  String?
  procedureId String      @db.Uuid
  media       MediaItem[]
  procedure   Procedure   @relation(fields: [procedureId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  questions   Question[]

  @@index([procedureId])
}

model YamlOutput {
  id      String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  content String
  taskId  String       @db.Uuid
  task    LearningTask @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([taskId])
}

model Flowchart {
  id      String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  mermaid String
  taskId  String       @db.Uuid
  task    LearningTask @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([taskId])
}

model Simulation {
  id     String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  taskId String           @db.Uuid
  task   LearningTask     @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  steps  SimulationStep[]

  @@index([taskId])
}

model SimulationStep {
  id               String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  prompt           String
  expectedAnswer   String?
  mediaUrl         String?
  latencyThreshold Int?
  feedback         String?
  simulationId     String     @db.Uuid
  simulation       Simulation @relation(fields: [simulationId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([simulationId])
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  PDF
}

enum SuggestionType {
  INSERTION
  CLARIFYING_QUESTION
  MCQ
  OPEN_ENDED
}

enum QuestionType {
  MCQ
  OPEN_ENDED
}

enum user_role {
  sme
  trainee
  admin
}
